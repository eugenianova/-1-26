//1. Определить, упорядочены ли значения в массиве по возрастанию.
//2. Если значения в массиве не упорядочены по возрастанию, то удалить из массива элементы, которые кратны введенному значению.
//3. Если значения в массиве упорядочены по возрастанию, то вставить новый элемент в массив перед элементом с большим его по значению.

#include "stdlib.h"
#include <vector>
#include "time.h"
#include <iostream> // подключение функций ввода/вывода
using namespace std; // чтобы не записывать std::cin

void vyvodvec(vector<int>& vecci) //функция вывода вектора
{
	cout << endl;
	for (int i = 0; i < vecci.size(); ++i)
		cout << vecci[i] << " ";
}

void deletepls(int* d1, int* d2, int n) // функция удаления элемента для статического и динамического массива
{
	int k = 0;
	for (int i = 0; i < 10; ++i)
		if (d1[i] % n != 0)
		{
			d2[k] = d1[i];
			k += 1;
			cout << d1[i] << " ";
		}
}

void changetovec(int* mass, vector<int>& v) // функция вставки элемента для статического и динамического массивов
{
	for (int i = 0; i < 10; ++i)
		v.push_back(mass[i]); // запихнули всё из неизменённого массива в вектор

	int x = 1 + rand() % 1000;
	//int r = 50;
	for (int j = 0; j < v.size(); ++j)
		if (v[j] > x)
		{
			v.insert(v.begin() + j, x);
			break;
		}
	cout << "Случайное число, подлежащее вставке в массив: " << x << endl;
	cout << "Массив со вставленным числом: " << endl;
	vyvodvec(v);
}

int enter() // функция ввода числа для всех заданий
{
	int v;
	cout << "Введите целое число, которому должны быть кратны элементы, подлежащие удалению:" << endl;
	cin >> v;
	if (v != 0)
		cout << "Числа кратные " << v << " будут удалены " << endl;
	else
	{
		cout << "Число не может быть кратно 0. Программа завершена. " << endl;
		return 0;
	}
	return(v);

}

bool up(int* mas) //функция, проверяющая упорядоченность элементов	СТАТИЧЕСКОГО И ДИНАМИЧЕСКОГО массива по возрастанию
{
	bool k = true;
	for (int t = 0; t <= 8; ++t)
		if (mas[t + 1] < mas[t])
		{
			k = false;
			cout << "Массив не упорядочен по возрастанию" << endl;
			break;
		}
	if (k == true)
		cout << "Массив упорядочен по возрастанию" << endl;
	return(k);
}

void int_massiv_stat_dyn(int* a) //генерируем целый случайный СТАТИЧЕСКИЙ ИЛИ ДИНАМИЧЕСКИЙ массив
{
	int i;
	srand(time(0)); // инициализация генерации случайных чисел
	//генерируем целый случайный массив из 10 элментов
	for (i = 0; i < 10; i++)
		a[i] = -1000 + rand() % 2000;
	for (i = 0; i < 10; i++)
		cout << a[i] << " "; // вывод результата на экране
	cout << "\n";
}

void vvodvec(vector<int>& a)
{
	srand(time(0)); // инициализация генерации случайных чисел
	//генерируем целый случайный векто из 10 элментов
	for (int i = 0; i < 10; i++)
		a[i] = (-1000 + rand() % 2000);

	for (int i = 0; i < 10; i++)
		cout << a[i] << " "; // вывод результата на экране
	cout << "\n";
}

void vvodvec(vector<long int>& a) //заполнение ВЕКТОРА случайными числами
{
	srand(time(0)); // инициализация генерации случайных чисел
	//генерируем целый случайный векто из 10 элментов
	for (int i = 0; i < 10; i++)
		a[i] = (-1000 + rand() % 2000);

	for (int i = 0; i < 10; i++)
		cout << a[i] << " "; // вывод результата на экране
	cout << "\n";
}

//функция удаления элементов вектора кратных введённому ранее числу
void deleteplsvec(vector<int>& v, int n)
{
	for (int i = 0; i < 10; ++i)
		if (v[i] % n != 0)
			cout << v[i] << " ";
}

void changetovec(vector<int>& v)
{
	int x = 1 + rand() % 1000;
	for (int j = 0; j < v.size(); ++j)
		if (v[j] > x)
		{
			v.insert(v.begin() + j, x);
			break;
		}
	cout << "Случайное число, подлежащее вставке в массив: " << x << endl;
	cout << "Массив со вставленным числом: " << endl;
	vyvodvec(v);
}

bool up(vector<int>& a) //функция, проверяющая упорядоченность элементов массива по возрастанию
{
	bool k = true;
	for (int t = 0; t <= a.size(); ++t)
		if (a[t + 1] < a[t])
		{
			k = false;
			cout << "Массив не упорядочен по возрастанию" << endl;
			break;
		}
	if (k == true)
		cout << "Массив упорядочен по возрастанию" << endl;
	return(k);
}

int main()
{
	setlocale(LC_ALL, "");
	cout << "Практическая работа №1 Тараканова Евгения " << endl;
	bool s;
	int arr[10];
	int arr1[10];
	vector<int> vect; //пустой вектор для третьего задания

	cout << "Выберите массив:" << endl << "1 - статический" << endl << "2 - динамический" << endl << "3 - вектор" << endl;
	int mode, size;
	do
	{
		cin >> mode;
		if (mode < 1 || mode > 3) cout << "Такого режима нет. Введите число от 1 до 3: ";
	} while (mode < 1 || mode > 3);


	switch (mode)
	{
	case 1:
	{//Статический массив

		bool s;
		int arr[10];
		int arr1[10];
		vector<int> vect; //пустой вектор для третьего задания

		cout << "Изначальный сформированный рандомнро массив: " << endl;
		int_massiv_stat_dyn(arr); //создали целочисленный массив размера 10
		s = up(arr); //буловская переменная, показывает, возрастает ли массив
		int z; // число, которому должны быть кратны удаляемые элементы массива
		if (s == false)
		{
			z = enter();
			deletepls(arr, arr1, z);
		}
		else
		{
			changetovec(arr, vect);
		}
		cout << endl << "Программа завершила свою работу успешно. " << endl;
		break;
	}
	case 2:
	{ //Динамический массив
		bool s;
		int* dynny = new int[10];
		int* dynny1 = new int[10];
		vector<int> vect; //пустой вектор для третьего задания

		cout << "Изначальный сформированный рандомно массив: " << endl;
		int_massiv_stat_dyn(dynny); //создали целочисленный динамический массив размера 1
		s = up(dynny); //буловская переменная, показаывает, возрастает ли массив

		int z; // число, которому должны быть кратны удаляемые элементы массива

		if (s == false)
		{
			z = enter();
			deletepls(dynny, dynny1, z);
		}
		else
		{
			changetovec(dynny, vect);
		}
		cout << endl << "Программа завершила свою работу успешно. " << endl;
		break;
	}
	case 3:
	{//вектор
		bool s;
		vector<int> vectorina(10); //инициализируем вектор и заполняем его десятью нулями
		cout << "Изначальный сформированный рандомно массив: " << endl;
		vvodvec(vectorina);
		s = up(vectorina); //буловская переменная, показаывает, возрастает ли массив
		int z; // число, которому должны быть кратны удаляемые элементы массива

		if (s == false)
		{
			z = enter();
			deleteplsvec(vectorina, z);
		}
		else
		{
			changetovec(vectorina);
		}
		cout << endl << "Программа завершила свою работу успешно. " << endl;
		break;
	}
	}
}